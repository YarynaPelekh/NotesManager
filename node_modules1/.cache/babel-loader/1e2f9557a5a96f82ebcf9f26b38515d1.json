{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst directoriesSlice = createSlice({\n  name: \"directoriesSlice\",\n  initialState: {\n    dataIsLoaded: false,\n    chosenDirectoryId: null,\n    directories: []\n  },\n  reducers: {\n    setChosenDirectoryId(state, action) {\n      state.chosenDirectoryId = action.payload;\n    },\n\n    addDirectory(state, action) {\n      state.directories.push(action.payload);\n    },\n\n    updateDirectory(state, action) {\n      state.directories = state.directories.map(item => {\n        return item.id === action.payload.id ? Object.assign(item, {\n          name: action.payload.name\n        }) : item;\n      });\n    },\n\n    removeDirectory(state, action) {\n      state.directories = state.directories.filter(item => item.id !== action.payload);\n    },\n\n    loadDirectoriesTree(state, action) {\n      action.payload.forEach(item => {\n        state.directories.push(item);\n      });\n      state.dataIsLoaded = true;\n    }\n\n  }\n});\nexport const directoriesActions = directoriesSlice.actions;\nexport default directoriesSlice;","map":{"version":3,"names":["createSlice","directoriesSlice","name","initialState","dataIsLoaded","chosenDirectoryId","directories","reducers","setChosenDirectoryId","state","action","payload","addDirectory","push","updateDirectory","map","item","id","Object","assign","removeDirectory","filter","loadDirectoriesTree","forEach","directoriesActions","actions"],"sources":["D:/Yaryna/HebronSoft/React/practice/notes-app/src/store/directories-slice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { DirectoryType } from \"../types/DirectoryTypes\";\r\n\r\nconst directoriesSlice = createSlice({\r\n  name: \"directoriesSlice\",\r\n  initialState: {\r\n    dataIsLoaded: false,\r\n    chosenDirectoryId: null,\r\n    directories: [] as DirectoryType[],\r\n  },\r\n  reducers: {\r\n    setChosenDirectoryId(state, action) {\r\n      state.chosenDirectoryId = action.payload;\r\n    },\r\n\r\n    addDirectory(state, action) {\r\n      state.directories.push(action.payload);\r\n    },\r\n\r\n    updateDirectory(state, action) {\r\n      state.directories = state.directories.map((item) => {\r\n        return item.id === action.payload.id ? Object.assign(item, { name: action.payload.name }) : item;\r\n      });\r\n    },\r\n\r\n    removeDirectory(state, action) {\r\n      state.directories = state.directories.filter((item) => item.id !== action.payload);\r\n    },\r\n\r\n    loadDirectoriesTree(state, action) {\r\n      action.payload.forEach((item: DirectoryType) => {\r\n        state.directories.push(item);\r\n      });\r\n      state.dataIsLoaded = true;\r\n    },\r\n  },\r\n});\r\n\r\nexport const directoriesActions = directoriesSlice.actions;\r\n\r\nexport default directoriesSlice;\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAIA,MAAMC,gBAAgB,GAAGD,WAAW,CAAC;EACnCE,IAAI,EAAE,kBAD6B;EAEnCC,YAAY,EAAE;IACZC,YAAY,EAAE,KADF;IAEZC,iBAAiB,EAAE,IAFP;IAGZC,WAAW,EAAE;EAHD,CAFqB;EAOnCC,QAAQ,EAAE;IACRC,oBAAoB,CAACC,KAAD,EAAQC,MAAR,EAAgB;MAClCD,KAAK,CAACJ,iBAAN,GAA0BK,MAAM,CAACC,OAAjC;IACD,CAHO;;IAKRC,YAAY,CAACH,KAAD,EAAQC,MAAR,EAAgB;MAC1BD,KAAK,CAACH,WAAN,CAAkBO,IAAlB,CAAuBH,MAAM,CAACC,OAA9B;IACD,CAPO;;IASRG,eAAe,CAACL,KAAD,EAAQC,MAAR,EAAgB;MAC7BD,KAAK,CAACH,WAAN,GAAoBG,KAAK,CAACH,WAAN,CAAkBS,GAAlB,CAAuBC,IAAD,IAAU;QAClD,OAAOA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACC,OAAP,CAAeM,EAA3B,GAAgCC,MAAM,CAACC,MAAP,CAAcH,IAAd,EAAoB;UAAEd,IAAI,EAAEQ,MAAM,CAACC,OAAP,CAAeT;QAAvB,CAApB,CAAhC,GAAqFc,IAA5F;MACD,CAFmB,CAApB;IAGD,CAbO;;IAeRI,eAAe,CAACX,KAAD,EAAQC,MAAR,EAAgB;MAC7BD,KAAK,CAACH,WAAN,GAAoBG,KAAK,CAACH,WAAN,CAAkBe,MAAlB,CAA0BL,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACC,OAAtD,CAApB;IACD,CAjBO;;IAmBRW,mBAAmB,CAACb,KAAD,EAAQC,MAAR,EAAgB;MACjCA,MAAM,CAACC,OAAP,CAAeY,OAAf,CAAwBP,IAAD,IAAyB;QAC9CP,KAAK,CAACH,WAAN,CAAkBO,IAAlB,CAAuBG,IAAvB;MACD,CAFD;MAGAP,KAAK,CAACL,YAAN,GAAqB,IAArB;IACD;;EAxBO;AAPyB,CAAD,CAApC;AAmCA,OAAO,MAAMoB,kBAAkB,GAAGvB,gBAAgB,CAACwB,OAA5C;AAEP,eAAexB,gBAAf"},"metadata":{},"sourceType":"module"}