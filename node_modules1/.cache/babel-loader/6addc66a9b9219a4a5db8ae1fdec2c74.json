{"ast":null,"code":"var _jsxFileName = \"D:\\\\Yaryna\\\\HebronSoft\\\\React\\\\practice\\\\notes-app\\\\src\\\\components\\\\Folders\\\\Buttons\\\\AddButton.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Modal from \"../../UI/Modal\";\nimport { appStateActions } from \"../../../store/app-state-slice\";\nimport { directoriesActions } from \"../../../store/directories-slice\";\nimport { NotificationTypes } from \"../../../types/NotificationTypes\";\nimport classes from \"../../../styles/Module/AddButton.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddButton = () => {\n  _s();\n\n  let notificationText = \"The directory was added successfully\";\n  let notificationType = NotificationTypes.alertLight;\n  let enteredName = \"\";\n  const [isModalShown, setIsModalShown] = useState(false);\n  const nameInputRef = useRef(null);\n  const dispatch = useDispatch();\n  const chosenDirectoryId = useSelector(state => state.directoriesSlice.chosenDirectoryId);\n\n  const addButtonHandler = () => {\n    setIsModalShown(true);\n  };\n\n  const addDirectoryHandler = async () => {\n    var _nameInputRef$current;\n\n    enteredName = ((_nameInputRef$current = nameInputRef.current) === null || _nameInputRef$current === void 0 ? void 0 : _nameInputRef$current.value) || \"\";\n\n    if (enteredName.trim().length === 0) {\n      alert(\"Please, enter a valid directory name!\");\n    } else {\n      const fetchData = async () => {\n        const response = await fetch(\"http://localhost:3000/directories\", {\n          method: \"POST\",\n          body: JSON.stringify({\n            parentId: chosenDirectoryId || \"1\",\n            name: enteredName\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Something went wrong/ sending data to backend!\");\n        } else {\n          const responseData = await response.json();\n          dispatch(directoriesActions.addDirectory({\n            id: responseData.id,\n            name: responseData.name,\n            parentId: responseData.parentId\n          }));\n        }\n      };\n\n      try {\n        await fetchData().catch(error => {\n          throw new Error(error.message);\n        });\n      } catch (error) {\n        if (error instanceof Error) {\n          notificationText = error.message;\n          notificationType = NotificationTypes.alertDanger;\n        }\n      }\n\n      dispatch(appStateActions.setState({\n        showNotification: true,\n        notificationType: notificationType,\n        notificationMessage: notificationText\n      }));\n      setIsModalShown(false);\n    }\n  };\n\n  const modalOnCloseHandle = () => {\n    setIsModalShown(false);\n  };\n\n  const addDirectoryElements = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.title,\n      children: \"Input a new directory name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.input,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.controlsContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addDirectoryHandler,\n        children: \"OK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: modalOnCloseHandle,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addButtonHandler,\n      children: \"ADD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), isModalShown && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: modalOnCloseHandle,\n      children: addDirectoryElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddButton, \"3SWgXsVgOoeq2cNeQkyUYdXfYa0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = AddButton;\nexport default AddButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddButton\");","map":{"version":3,"names":["Fragment","useState","useRef","useSelector","useDispatch","Modal","appStateActions","directoriesActions","NotificationTypes","classes","AddButton","notificationText","notificationType","alertLight","enteredName","isModalShown","setIsModalShown","nameInputRef","dispatch","chosenDirectoryId","state","directoriesSlice","addButtonHandler","addDirectoryHandler","current","value","trim","length","alert","fetchData","response","fetch","method","body","JSON","stringify","parentId","name","headers","ok","Error","responseData","json","addDirectory","id","catch","error","message","alertDanger","setState","showNotification","notificationMessage","modalOnCloseHandle","addDirectoryElements","title","input","controlsContainer"],"sources":["D:/Yaryna/HebronSoft/React/practice/notes-app/src/components/Folders/Buttons/AddButton.tsx"],"sourcesContent":["import { Fragment, useState, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport Modal from \"../../UI/Modal\";\r\n\r\nimport { appStateActions } from \"../../../store/app-state-slice\";\r\nimport { directoriesActions } from \"../../../store/directories-slice\";\r\n\r\nimport { NotificationTypes } from \"../../../types/NotificationTypes\";\r\n\r\nimport classes from \"../../../styles/Module/AddButton.module.css\";\r\n\r\nconst AddButton = () => {\r\n  let notificationText = \"The directory was added successfully\";\r\n  let notificationType = NotificationTypes.alertLight;\r\n  let enteredName = \"\";\r\n\r\n  const [isModalShown, setIsModalShown] = useState<boolean>(false);\r\n  const nameInputRef = useRef<HTMLInputElement>(null);\r\n  const dispatch = useDispatch();\r\n\r\n  const chosenDirectoryId = useSelector(\r\n    (state: { directoriesSlice: { chosenDirectoryId: string } }) => state.directoriesSlice.chosenDirectoryId\r\n  );\r\n\r\n  const addButtonHandler = () => {\r\n    setIsModalShown(true);\r\n  };\r\n\r\n  const addDirectoryHandler = async () => {\r\n    enteredName = nameInputRef.current?.value || \"\";\r\n    if (enteredName.trim().length === 0) {\r\n      alert(\"Please, enter a valid directory name!\");\r\n    } else {\r\n      const fetchData = async () => {\r\n        const response = await fetch(\"http://localhost:3000/directories\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            parentId: chosenDirectoryId || \"1\",\r\n            name: enteredName,\r\n          }),\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Something went wrong/ sending data to backend!\");\r\n        } else {\r\n          const responseData = await response.json();\r\n          dispatch(\r\n            directoriesActions.addDirectory({\r\n              id: responseData.id,\r\n              name: responseData.name,\r\n              parentId: responseData.parentId,\r\n            })\r\n          );\r\n        }\r\n      };\r\n\r\n      try {\r\n        await fetchData().catch((error) => {\r\n          throw new Error(error.message);\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error) {\r\n          notificationText = error.message;\r\n          notificationType = NotificationTypes.alertDanger;\r\n        }\r\n      }\r\n\r\n      dispatch(\r\n        appStateActions.setState({\r\n          showNotification: true,\r\n          notificationType: notificationType,\r\n          notificationMessage: notificationText,\r\n        })\r\n      );\r\n      setIsModalShown(false);\r\n    }\r\n  };\r\n\r\n  const modalOnCloseHandle = () => {\r\n    setIsModalShown(false);\r\n  };\r\n\r\n  const addDirectoryElements = (\r\n    <Fragment>\r\n      <p className={classes.title}>Input a new directory name</p>\r\n      <div className={classes.input}>\r\n        <label htmlFor=\"name\">Name</label>\r\n        <input id=\"name\" ref={nameInputRef}></input>\r\n      </div>\r\n      <div className={classes.controlsContainer}>\r\n        <button onClick={addDirectoryHandler}>OK</button>\r\n        <button onClick={modalOnCloseHandle}>Cancel</button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={addButtonHandler}>ADD</button>\r\n      {isModalShown && <Modal onClose={modalOnCloseHandle}>{addDirectoryElements}</Modal>}\r\n    </div>\r\n  );\r\n};\r\nexport default AddButton;\r\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,MAA7B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,kBAAT,QAAmC,kCAAnC;AAEA,SAASC,iBAAT,QAAkC,kCAAlC;AAEA,OAAOC,OAAP,MAAoB,6CAApB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EACtB,IAAIC,gBAAgB,GAAG,sCAAvB;EACA,IAAIC,gBAAgB,GAAGJ,iBAAiB,CAACK,UAAzC;EACA,IAAIC,WAAW,GAAG,EAAlB;EAEA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAU,KAAV,CAAhD;EACA,MAAMgB,YAAY,GAAGf,MAAM,CAAmB,IAAnB,CAA3B;EACA,MAAMgB,QAAQ,GAAGd,WAAW,EAA5B;EAEA,MAAMe,iBAAiB,GAAGhB,WAAW,CAClCiB,KAAD,IAAgEA,KAAK,CAACC,gBAAN,CAAuBF,iBADpD,CAArC;;EAIA,MAAMG,gBAAgB,GAAG,MAAM;IAC7BN,eAAe,CAAC,IAAD,CAAf;EACD,CAFD;;EAIA,MAAMO,mBAAmB,GAAG,YAAY;IAAA;;IACtCT,WAAW,GAAG,0BAAAG,YAAY,CAACO,OAAb,gFAAsBC,KAAtB,KAA+B,EAA7C;;IACA,IAAIX,WAAW,CAACY,IAAZ,GAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;MACnCC,KAAK,CAAC,uCAAD,CAAL;IACD,CAFD,MAEO;MACL,MAAMC,SAAS,GAAG,YAAY;QAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAD,EAAsC;UAChEC,MAAM,EAAE,MADwD;UAEhEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;YACnBC,QAAQ,EAAEjB,iBAAiB,IAAI,GADZ;YAEnBkB,IAAI,EAAEvB;UAFa,CAAf,CAF0D;UAMhEwB,OAAO,EAAE;YAAE,gBAAgB;UAAlB;QANuD,CAAtC,CAA5B;;QASA,IAAI,CAACR,QAAQ,CAACS,EAAd,EAAkB;UAChB,MAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;QACD,CAFD,MAEO;UACL,MAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAA3B;UACAxB,QAAQ,CACNX,kBAAkB,CAACoC,YAAnB,CAAgC;YAC9BC,EAAE,EAAEH,YAAY,CAACG,EADa;YAE9BP,IAAI,EAAEI,YAAY,CAACJ,IAFW;YAG9BD,QAAQ,EAAEK,YAAY,CAACL;UAHO,CAAhC,CADM,CAAR;QAOD;MACF,CAtBD;;MAwBA,IAAI;QACF,MAAMP,SAAS,GAAGgB,KAAZ,CAAmBC,KAAD,IAAW;UACjC,MAAM,IAAIN,KAAJ,CAAUM,KAAK,CAACC,OAAhB,CAAN;QACD,CAFK,CAAN;MAGD,CAJD,CAIE,OAAOD,KAAP,EAAc;QACd,IAAIA,KAAK,YAAYN,KAArB,EAA4B;UAC1B7B,gBAAgB,GAAGmC,KAAK,CAACC,OAAzB;UACAnC,gBAAgB,GAAGJ,iBAAiB,CAACwC,WAArC;QACD;MACF;;MAED9B,QAAQ,CACNZ,eAAe,CAAC2C,QAAhB,CAAyB;QACvBC,gBAAgB,EAAE,IADK;QAEvBtC,gBAAgB,EAAEA,gBAFK;QAGvBuC,mBAAmB,EAAExC;MAHE,CAAzB,CADM,CAAR;MAOAK,eAAe,CAAC,KAAD,CAAf;IACD;EACF,CAjDD;;EAmDA,MAAMoC,kBAAkB,GAAG,MAAM;IAC/BpC,eAAe,CAAC,KAAD,CAAf;EACD,CAFD;;EAIA,MAAMqC,oBAAoB,gBACxB,QAAC,QAAD;IAAA,wBACE;MAAG,SAAS,EAAE5C,OAAO,CAAC6C,KAAtB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAE7C,OAAO,CAAC8C,KAAxB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAO,EAAE,EAAC,MAAV;QAAiB,GAAG,EAAEtC;MAAtB;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAME;MAAK,SAAS,EAAER,OAAO,CAAC+C,iBAAxB;MAAA,wBACE;QAAQ,OAAO,EAAEjC,mBAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAQ,OAAO,EAAE6B,kBAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;;EAcA,oBACE;IAAA,wBACE;MAAQ,OAAO,EAAE9B,gBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAEGP,YAAY,iBAAI,QAAC,KAAD;MAAO,OAAO,EAAEqC,kBAAhB;MAAA,UAAqCC;IAArC;MAAA;MAAA;MAAA;IAAA,QAFnB;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CA5FD;;GAAM3C,S;UAOaN,W,EAESD,W;;;KATtBO,S;AA6FN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}