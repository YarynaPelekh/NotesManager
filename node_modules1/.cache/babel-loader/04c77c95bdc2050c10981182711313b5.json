{"ast":null,"code":"var _jsxFileName = \"D:\\\\Yaryna\\\\HebronSoft\\\\React\\\\practice\\\\notes-app\\\\src\\\\components\\\\Notes\\\\ContainerDnD.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useDrop } from \"react-dnd\";\nimport { notesActions } from \"../../store/notes-slice\";\nimport { appStateActions } from \"../../store/app-state-slice\";\nimport { NotificationTypes } from \"../../types/NotificationTypes\";\nimport { DnDTypes } from \"../../types/DnDTypes\";\nimport classes from \"../../styles/Module/ContainerDnD.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContainerDnD = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const chosenDirectoryId = useSelector(state => state.directoriesSlice.chosenDirectoryId);\n  const notesList = useSelector(state => state.notesSlice.notes);\n\n  const updateNotesOnBackend = async notes => {\n    let notificationText = \"\";\n    let notificationType = NotificationTypes.alertSecondary;\n\n    for (const note of notes) {\n      const fetchData = async () => {\n        const response = await fetch(\"http://localhost:3000/notices/\" + String(note.id), {\n          method: \"PUT\",\n          body: JSON.stringify(note),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Something went wrong/ sending data to backend!\");\n        } else {\n          const responseData = await response.json();\n          dispatch(notesActions.updateNote(responseData));\n        }\n      };\n\n      try {\n        await fetchData().catch(error => {\n          throw new Error(error.message);\n        });\n      } catch (error) {\n        if (error instanceof Error) {\n          notificationText = error.message;\n          notificationType = NotificationTypes.alertDanger;\n          dispatch(appStateActions.setState({\n            showNotification: true,\n            notificationType: notificationType,\n            notificationMessage: notificationText\n          }));\n          break;\n        }\n      }\n    }\n  };\n\n  const moveItem = (itemFrom, monitor) => {\n    if (!itemFrom.noteId) {\n      return;\n    }\n\n    const selectedNotes = notesList.filter(item => item.directoryId === chosenDirectoryId);\n    selectedNotes.sort((a, b) => {\n      return a.position - b.position;\n    });\n    const noteFrom = selectedNotes.filter(item => item.id === +itemFrom.noteId)[0];\n    const noteTo = Object.assign({}, selectedNotes.splice(selectedNotes.indexOf(noteFrom), 1)[0], {\n      position: props.noteTo.position\n    });\n    selectedNotes.splice(props.noteTo.position, 0, noteTo);\n\n    for (let i = 0; i < selectedNotes.length; i++) {\n      selectedNotes[i] = Object.assign({}, selectedNotes[i], {\n        position: i\n      });\n    } // selectedNotes.forEach((item) => {\n\n\n    updateNotesOnBackend(selectedNotes); // });\n  };\n\n  const [{\n    isOver\n  }, drop] = useDrop(() => ({\n    accept: DnDTypes.noteItem,\n    drop: (itemFrom, monitor) => moveItem(itemFrom, monitor),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  }), [notesList]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.containerDnD,\n    ref: drop,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContainerDnD, \"2OOY6NgZ84TQeWcvorZqVOqWxI8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useDrop];\n});\n\n_c = ContainerDnD;\nexport default _c2 = /*#__PURE__*/React.memo(ContainerDnD);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ContainerDnD\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useSelector","useDispatch","useDrop","notesActions","appStateActions","NotificationTypes","DnDTypes","classes","ContainerDnD","props","dispatch","chosenDirectoryId","state","directoriesSlice","notesList","notesSlice","notes","updateNotesOnBackend","notificationText","notificationType","alertSecondary","note","fetchData","response","fetch","String","id","method","body","JSON","stringify","headers","ok","Error","responseData","json","updateNote","catch","error","message","alertDanger","setState","showNotification","notificationMessage","moveItem","itemFrom","monitor","noteId","selectedNotes","filter","item","directoryId","sort","a","b","position","noteFrom","noteTo","Object","assign","splice","indexOf","i","length","isOver","drop","accept","noteItem","collect","containerDnD","children","memo"],"sources":["D:/Yaryna/HebronSoft/React/practice/notes-app/src/components/Notes/ContainerDnD.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useDrop } from \"react-dnd\";\r\n\r\nimport { notesActions } from \"../../store/notes-slice\";\r\n\r\nimport { appStateActions } from \"../../store/app-state-slice\";\r\nimport { NotificationTypes } from \"../../types/NotificationTypes\";\r\n\r\nimport { DnDTypes } from \"../../types/DnDTypes\";\r\nimport { NoteType } from \"../../types/NotesTypes\";\r\n\r\nimport classes from \"../../styles/Module/ContainerDnD.module.css\";\r\n\r\nconst ContainerDnD = (props: { noteTo: NoteType; children: JSX.Element }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const chosenDirectoryId = useSelector(\r\n    (state: { directoriesSlice: { chosenDirectoryId: string } }) => state.directoriesSlice.chosenDirectoryId\r\n  );\r\n\r\n  const notesList = useSelector((state: { notesSlice: { notes: NoteType[] } }) => state.notesSlice.notes) as NoteType[];\r\n\r\n  const updateNotesOnBackend = async (notes: NoteType[]) => {\r\n    let notificationText = \"\";\r\n    let notificationType = NotificationTypes.alertSecondary;\r\n\r\n    for (const note of notes) {\r\n      const fetchData = async () => {\r\n        const response = await fetch(\"http://localhost:3000/notices/\" + String(note.id), {\r\n          method: \"PUT\",\r\n          body: JSON.stringify(note),\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Something went wrong/ sending data to backend!\");\r\n        } else {\r\n          const responseData = await response.json();\r\n          dispatch(notesActions.updateNote(responseData));\r\n        }\r\n      };\r\n\r\n      try {\r\n        await fetchData().catch((error) => {\r\n          throw new Error(error.message);\r\n        });\r\n      } catch (error) {\r\n        if (error instanceof Error) {\r\n          notificationText = error.message;\r\n          notificationType = NotificationTypes.alertDanger;\r\n          dispatch(\r\n            appStateActions.setState({\r\n              showNotification: true,\r\n              notificationType: notificationType,\r\n              notificationMessage: notificationText,\r\n            })\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const moveItem = (itemFrom, monitor) => {\r\n    if (!itemFrom.noteId) {\r\n      return;\r\n    }\r\n\r\n    const selectedNotes = notesList.filter((item: NoteType) => item.directoryId === chosenDirectoryId);\r\n    selectedNotes.sort((a, b) => {\r\n      return a.position - b.position;\r\n    });\r\n\r\n    const noteFrom = selectedNotes.filter((item: NoteType) => item.id === +itemFrom.noteId)[0];\r\n\r\n    const noteTo = Object.assign({}, selectedNotes.splice(selectedNotes.indexOf(noteFrom), 1)[0], {\r\n      position: props.noteTo.position,\r\n    });\r\n\r\n    selectedNotes.splice(props.noteTo.position, 0, noteTo);\r\n    for (let i = 0; i < selectedNotes.length; i++) {\r\n      selectedNotes[i] = Object.assign({}, selectedNotes[i], { position: i });\r\n    }\r\n\r\n    // selectedNotes.forEach((item) => {\r\n    updateNotesOnBackend(selectedNotes);\r\n    // });\r\n  };\r\n\r\n  const [{ isOver }, drop] = useDrop(\r\n    () => ({\r\n      accept: DnDTypes.noteItem,\r\n      drop: (itemFrom, monitor) => moveItem(itemFrom, monitor),\r\n      collect: (monitor) => ({\r\n        isOver: !!monitor.isOver(),\r\n      }),\r\n    }),\r\n    [notesList]\r\n  );\r\n\r\n  return (\r\n    <div className={classes.containerDnD} ref={drop}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ContainerDnD);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}