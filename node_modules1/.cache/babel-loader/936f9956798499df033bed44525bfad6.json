{"ast":null,"code":"var _jsxFileName = \"D:\\\\Yaryna\\\\HebronSoft\\\\React\\\\practice\\\\notes-app\\\\src\\\\components\\\\Notes\\\\Notes.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport NotesList from \"./NotesList\";\nimport NotesControls from \"./NotesControls\";\nimport SearchBar from \"./Search/SearchBar.tsx\";\nimport { appStateActions } from \"../../store/app-state-slice\";\nimport { notesActions } from \"../../store/notes-slice\";\nimport { tagsActions } from \"../../store/tags-slice\";\nimport { NotificationTypes } from \"../../types/NotificationTypes\";\nimport classes from \"../../styles/Module/Notes.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Notes = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const chosenDirectoryId = useSelector(state => state.directoriesSlice.chosenDirectoryId);\n  let notesList = [...useSelector(state => state.notesSlice.notes)];\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch(\"http://localhost:3000/notices\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong! Fetching data from backend.\");\n      }\n\n      const responseData = await response.json();\n      const loadedData = [];\n      responseData.forEach(item => {\n        loadedData.push({\n          description: item.description,\n          directoryId: item.directoryId,\n          id: item.id,\n          position: item.position,\n          tags: item.tags,\n          title: item.title\n        });\n      });\n      dispatch(notesActions.loadNotes(responseData));\n      const tagsString = responseData.map(item => {\n        return item.tags;\n      }).join().split(\",\").filter((v, i, a) => a.indexOf(v) === i).join();\n      dispatch(tagsActions.loadTags(tagsString));\n    };\n\n    if (notesList.length === 0) {\n      fetchData().catch(error => {\n        console.log(\"fetching error\", error.message);\n        dispatch(appStateActions.setState({\n          showNotification: true,\n          notificationType: NotificationTypes.alertDanger,\n          notificationMessage: error.message\n        }));\n      });\n    }\n  }, []);\n  notesList = notesList.sort((a, b) => {\n    return a.position - b.position;\n  }).filter(item => item.directoryId === chosenDirectoryId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.notes,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotesControls, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotesList, {\n      notes: notesList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Notes, \"8HJO66JNm7jj4KhQAaVZeFUkZb8=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Notes;\nexport default Notes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"names":["useEffect","useDispatch","useSelector","NotesList","NotesControls","SearchBar","appStateActions","notesActions","tagsActions","NotificationTypes","classes","Notes","dispatch","chosenDirectoryId","state","directoriesSlice","notesList","notesSlice","notes","fetchData","response","fetch","ok","Error","responseData","json","loadedData","forEach","item","push","description","directoryId","id","position","tags","title","loadNotes","tagsString","map","join","split","filter","v","i","a","indexOf","loadTags","length","catch","error","console","log","message","setState","showNotification","notificationType","alertDanger","notificationMessage","sort","b"],"sources":["D:/Yaryna/HebronSoft/React/practice/notes-app/src/components/Notes/Notes.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport NotesList from \"./NotesList\";\r\nimport NoteDetails from \"./NoteDetails\";\r\nimport NotesControls from \"./NotesControls\";\r\nimport SearchBar from \"./Search/SearchBar.tsx\";\r\n\r\nimport { appStateActions } from \"../../store/app-state-slice\";\r\nimport { notesActions } from \"../../store/notes-slice\";\r\nimport { tagsActions } from \"../../store/tags-slice\";\r\n\r\nimport { NoteType } from \"../../types/NotesTypes\";\r\nimport { NotificationTypes } from \"../../types/NotificationTypes\";\r\n\r\nimport classes from \"../../styles/Module/Notes.module.css\";\r\n\r\nconst Notes = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const chosenDirectoryId = useSelector(\r\n    (state: { directoriesSlice: { chosenDirectoryId: string } }) => state.directoriesSlice.chosenDirectoryId\r\n  );\r\n  let notesList = [\r\n    ...(useSelector((state: { notesSlice: { notes: NoteType[] } }) => state.notesSlice.notes) as NoteType[]),\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\"http://localhost:3000/notices\");\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong! Fetching data from backend.\");\r\n      }\r\n      const responseData = await response.json();\r\n\r\n      const loadedData: NoteType[] = [];\r\n      responseData.forEach((item: NoteType) => {\r\n        loadedData.push({\r\n          description: item.description,\r\n          directoryId: item.directoryId,\r\n          id: item.id,\r\n          position: item.position,\r\n          tags: item.tags,\r\n          title: item.title,\r\n        });\r\n      });\r\n      dispatch(notesActions.loadNotes(responseData));\r\n\r\n      const tagsString = responseData\r\n        .map((item) => {\r\n          return item.tags;\r\n        })\r\n        .join()\r\n        .split(\",\")\r\n        .filter((v, i, a) => a.indexOf(v) === i)\r\n        .join();\r\n\r\n      dispatch(tagsActions.loadTags(tagsString));\r\n    };\r\n\r\n    if (notesList.length === 0) {\r\n      fetchData().catch((error) => {\r\n        console.log(\"fetching error\", error.message);\r\n        dispatch(\r\n          appStateActions.setState({\r\n            showNotification: true,\r\n            notificationType: NotificationTypes.alertDanger,\r\n            notificationMessage: error.message,\r\n          })\r\n        );\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  notesList = notesList\r\n    .sort((a, b) => {\r\n      return a.position - b.position;\r\n    })\r\n    .filter((item: NoteType) => item.directoryId === chosenDirectoryId);\r\n\r\n  return (\r\n    <div className={classes.notes}>\r\n      <p>Notes</p>\r\n      <NotesControls />\r\n      <NotesList notes={notesList} />\r\n      <SearchBar />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}