{"ast":null,"code":"var _jsxFileName = \"D:\\\\Yaryna\\\\HebronSoft\\\\React\\\\practice\\\\notes-app\\\\src\\\\components\\\\Folders\\\\Buttons\\\\RemoveButton.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport Modal from \"../../UI/Modal\";\nimport { appStateActions } from \"../../../store/app-state-slice\";\nimport { directoriesActions } from \"../../../store/directories-slice\";\nimport { NotificationTypes } from \"../../../types/NotificationTypes\"; // @ts-ignore\n\nimport classes from \"../../../styles/Module/AddButton.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RemoveButton = () => {\n  _s();\n\n  let notificationText = \"\";\n  let notificationType = NotificationTypes.alertSecondary;\n  const [isModalShown, setIsModalShown] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const directories = useSelector(state => state.directoriesSlice.directories);\n  const chosenDirectoryId = useSelector(state => state.directoriesSlice.chosenDirectoryId);\n\n  const removeButtonHandler = () => {\n    if (chosenDirectoryId) {\n      setIsModalShown(true);\n    } else {\n      setIsModalShown(false);\n      notificationText = \"Please, choose a directory to remove.\";\n      dispatch(appStateActions.setState({\n        showNotification: true,\n        notificationType: NotificationTypes.alertWarning,\n        notificationMessage: notificationText\n      }));\n    }\n  };\n\n  useEffect(() => {\n    isModalShown && dispatch(directoriesActions.setChosenDirectoryId(\"\"));\n  }, [location.pathname]);\n\n  const removeItem = async itemId => {\n    const fetchData = async () => {\n      const response = await fetch(\"http://localhost:3000/directories/\" + itemId.trim(), {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong/ deleting data from backend!\");\n      }\n\n      dispatch(directoriesActions.removeDirectory(+itemId));\n    };\n\n    await fetchData().catch(error => {\n      throw new Error(error.message);\n    });\n  };\n\n  const recursiveRemove = async currentId => {\n    const arrChildren = directories.filter(item => item.parentId === currentId);\n    arrChildren.length > 0 && arrChildren.forEach(item => {\n      recursiveRemove(String(item.id));\n    });\n    await removeItem(currentId);\n  };\n\n  const removeDirectoryHandler = async () => {\n    let errorText = \"\";\n\n    try {\n      await recursiveRemove(chosenDirectoryId);\n    } catch (error) {\n      if (error instanceof Error) {\n        errorText = error.message;\n      }\n    }\n\n    setIsModalShown(false);\n\n    if (errorText) {\n      notificationText = errorText;\n      notificationType = NotificationTypes.alertDanger;\n    } else {\n      notificationText = \"The directory was removed successfully\"; // const path = \"..\" + location.pathname.slice(0, location.pathname.lastIndexOf(\"/\"));\n\n      const path = \"/\";\n      navigate(path, {\n        replace: true\n      });\n    }\n\n    dispatch(appStateActions.setState({\n      showNotification: true,\n      notificationType: notificationType,\n      notificationMessage: notificationText\n    }));\n  };\n\n  const modalOnCloseHandle = () => {\n    setIsModalShown(false);\n  };\n\n  const removeDirectoryElements = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.title,\n      children: \"Are you sure to remove directory?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.controlsContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: removeDirectoryHandler,\n        children: \"OK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: modalOnCloseHandle,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: removeButtonHandler,\n      children: \"REMOVE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), isModalShown && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: modalOnCloseHandle,\n      children: removeDirectoryElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RemoveButton, \"AfdDlOPeF9D6xlOHln3dZfA6DAc=\", false, function () {\n  return [useDispatch, useNavigate, useLocation, useSelector, useSelector];\n});\n\n_c = RemoveButton;\nexport default RemoveButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"RemoveButton\");","map":{"version":3,"names":["Fragment","useEffect","useState","useSelector","useDispatch","useNavigate","useLocation","Modal","appStateActions","directoriesActions","NotificationTypes","classes","RemoveButton","notificationText","notificationType","alertSecondary","isModalShown","setIsModalShown","dispatch","navigate","location","directories","state","directoriesSlice","chosenDirectoryId","removeButtonHandler","setState","showNotification","alertWarning","notificationMessage","setChosenDirectoryId","pathname","removeItem","itemId","fetchData","response","fetch","trim","method","headers","ok","Error","removeDirectory","catch","error","message","recursiveRemove","currentId","arrChildren","filter","item","parentId","length","forEach","String","id","removeDirectoryHandler","errorText","alertDanger","path","replace","modalOnCloseHandle","removeDirectoryElements","title","controlsContainer"],"sources":["D:/Yaryna/HebronSoft/React/practice/notes-app/src/components/Folders/Buttons/RemoveButton.tsx"],"sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\n\r\nimport Modal from \"../../UI/Modal\";\r\n\r\nimport { appStateActions } from \"../../../store/app-state-slice\";\r\nimport { directoriesActions } from \"../../../store/directories-slice\";\r\n\r\nimport { NotificationTypes } from \"../../../types/NotificationTypes\";\r\n\r\n// @ts-ignore\r\nimport { DirectoryType } from \"../../types/DirectoryTypes\";\r\n\r\nimport classes from \"../../../styles/Module/AddButton.module.css\";\r\n\r\nconst RemoveButton = () => {\r\n  let notificationText = \"\";\r\n  let notificationType = NotificationTypes.alertSecondary;\r\n\r\n  const [isModalShown, setIsModalShown] = useState<boolean>(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const directories = useSelector(\r\n    (state: { directoriesSlice: { directories: DirectoryType[] } }) => state.directoriesSlice.directories\r\n  );\r\n\r\n  const chosenDirectoryId = useSelector(\r\n    (state: { directoriesSlice: { chosenDirectoryId: string } }) => state.directoriesSlice.chosenDirectoryId\r\n  );\r\n\r\n  const removeButtonHandler = () => {\r\n    if (chosenDirectoryId) {\r\n      setIsModalShown(true);\r\n    } else {\r\n      setIsModalShown(false);\r\n      notificationText = \"Please, choose a directory to remove.\";\r\n      dispatch(\r\n        appStateActions.setState({\r\n          showNotification: true,\r\n          notificationType: NotificationTypes.alertWarning,\r\n          notificationMessage: notificationText,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    isModalShown && dispatch(directoriesActions.setChosenDirectoryId(\"\"));\r\n  }, [location.pathname]);\r\n\r\n  const removeItem = async (itemId: string) => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\"http://localhost:3000/directories/\" + itemId.trim(), {\r\n        method: \"DELETE\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong/ deleting data from backend!\");\r\n      }\r\n      dispatch(directoriesActions.removeDirectory(+itemId));\r\n    };\r\n\r\n    await fetchData().catch((error) => {\r\n      throw new Error(error.message);\r\n    });\r\n  };\r\n\r\n  const recursiveRemove = async (currentId: string) => {\r\n    const arrChildren = directories.filter((item) => item.parentId === currentId) as DirectoryType[];\r\n\r\n    arrChildren.length > 0 &&\r\n      arrChildren.forEach((item) => {\r\n        recursiveRemove(String(item.id));\r\n      });\r\n\r\n    await removeItem(currentId);\r\n  };\r\n\r\n  const removeDirectoryHandler = async () => {\r\n    let errorText = \"\";\r\n    try {\r\n      await recursiveRemove(chosenDirectoryId);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        errorText = error.message;\r\n      }\r\n    }\r\n\r\n    setIsModalShown(false);\r\n\r\n    if (errorText) {\r\n      notificationText = errorText;\r\n      notificationType = NotificationTypes.alertDanger;\r\n    } else {\r\n      notificationText = \"The directory was removed successfully\";\r\n      // const path = \"..\" + location.pathname.slice(0, location.pathname.lastIndexOf(\"/\"));\r\n      const path = \"/\";\r\n      navigate(path, { replace: true });\r\n    }\r\n\r\n    dispatch(\r\n      appStateActions.setState({\r\n        showNotification: true,\r\n        notificationType: notificationType,\r\n        notificationMessage: notificationText,\r\n      })\r\n    );\r\n  };\r\n\r\n  const modalOnCloseHandle = () => {\r\n    setIsModalShown(false);\r\n  };\r\n\r\n  const removeDirectoryElements = (\r\n    <Fragment>\r\n      <p className={classes.title}>Are you sure to remove directory?</p>\r\n\r\n      <div className={classes.controlsContainer}>\r\n        <button onClick={removeDirectoryHandler}>OK</button>\r\n        <button onClick={modalOnCloseHandle}>Cancel</button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={removeButtonHandler}>REMOVE</button>\r\n      {isModalShown && <Modal onClose={modalOnCloseHandle}>{removeDirectoryElements}</Modal>}\r\n    </div>\r\n  );\r\n};\r\nexport default RemoveButton;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}