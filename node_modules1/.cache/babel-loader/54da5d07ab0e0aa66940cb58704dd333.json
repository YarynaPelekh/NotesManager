{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst notesSlice = createSlice({\n  name: \"notesSlice\",\n  initialState: {\n    dataIsLoaded: false,\n    notes: [],\n    chosenNoteId: null\n  },\n  reducers: {\n    loadNotes(state, action) {\n      action.payload.forEach(item => {\n        state.notes.push(item);\n      });\n      state.dataIsLoaded = true;\n    },\n\n    addNote(state, action) {\n      state.notes.push(action.payload);\n    },\n\n    setChosenNoteId(state, action) {\n      state.chosenNoteId = action.payload;\n    },\n\n    updateNote(state, action) {\n      state.notes = state.notes.map(item => {\n        return item.id === action.payload.id ? Object.assign(item, action.payload) : item;\n      });\n    },\n\n    removeNote(state, action) {\n      state.notes = state.notes.filter(item => item.id !== +action.payload);\n    }\n\n  }\n});\nexport const notesActions = notesSlice.actions;\nexport default notesSlice;","map":{"version":3,"names":["createSlice","notesSlice","name","initialState","dataIsLoaded","notes","chosenNoteId","reducers","loadNotes","state","action","payload","forEach","item","push","addNote","setChosenNoteId","updateNote","map","id","Object","assign","removeNote","filter","notesActions","actions"],"sources":["D:/Yaryna/HebronSoft/React/practice/notes-app/src/store/notes-slice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { NoteType } from \"../types/NotesTypes\";\r\n\r\nconst notesSlice = createSlice({\r\n  name: \"notesSlice\",\r\n  initialState: {\r\n    dataIsLoaded: false,\r\n    notes: [] as NoteType[],\r\n    chosenNoteId: null,\r\n  },\r\n  reducers: {\r\n    loadNotes(state, action) {\r\n      action.payload.forEach((item: NoteType) => {\r\n        state.notes.push(item);\r\n      });\r\n      state.dataIsLoaded = true;\r\n    },\r\n\r\n    addNote(state, action) {\r\n      state.notes.push(action.payload);\r\n    },\r\n\r\n    setChosenNoteId(state, action) {\r\n      state.chosenNoteId = action.payload;\r\n    },\r\n\r\n    updateNote(state, action) {\r\n      state.notes = state.notes.map((item) => {\r\n        return item.id === action.payload.id ? Object.assign(item, action.payload) : item;\r\n      });\r\n    },\r\n\r\n    removeNote(state, action) {\r\n      state.notes = state.notes.filter((item) => item.id !== +action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const notesActions = notesSlice.actions;\r\n\r\nexport default notesSlice;\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAIA,MAAMC,UAAU,GAAGD,WAAW,CAAC;EAC7BE,IAAI,EAAE,YADuB;EAE7BC,YAAY,EAAE;IACZC,YAAY,EAAE,KADF;IAEZC,KAAK,EAAE,EAFK;IAGZC,YAAY,EAAE;EAHF,CAFe;EAO7BC,QAAQ,EAAE;IACRC,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;MACvBA,MAAM,CAACC,OAAP,CAAeC,OAAf,CAAwBC,IAAD,IAAoB;QACzCJ,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAiBD,IAAjB;MACD,CAFD;MAGAJ,KAAK,CAACL,YAAN,GAAqB,IAArB;IACD,CANO;;IAQRW,OAAO,CAACN,KAAD,EAAQC,MAAR,EAAgB;MACrBD,KAAK,CAACJ,KAAN,CAAYS,IAAZ,CAAiBJ,MAAM,CAACC,OAAxB;IACD,CAVO;;IAYRK,eAAe,CAACP,KAAD,EAAQC,MAAR,EAAgB;MAC7BD,KAAK,CAACH,YAAN,GAAqBI,MAAM,CAACC,OAA5B;IACD,CAdO;;IAgBRM,UAAU,CAACR,KAAD,EAAQC,MAAR,EAAgB;MACxBD,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYa,GAAZ,CAAiBL,IAAD,IAAU;QACtC,OAAOA,IAAI,CAACM,EAAL,KAAYT,MAAM,CAACC,OAAP,CAAeQ,EAA3B,GAAgCC,MAAM,CAACC,MAAP,CAAcR,IAAd,EAAoBH,MAAM,CAACC,OAA3B,CAAhC,GAAsEE,IAA7E;MACD,CAFa,CAAd;IAGD,CApBO;;IAsBRS,UAAU,CAACb,KAAD,EAAQC,MAAR,EAAgB;MACxBD,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYkB,MAAZ,CAAoBV,IAAD,IAAUA,IAAI,CAACM,EAAL,KAAY,CAACT,MAAM,CAACC,OAAjD,CAAd;IACD;;EAxBO;AAPmB,CAAD,CAA9B;AAmCA,OAAO,MAAMa,YAAY,GAAGvB,UAAU,CAACwB,OAAhC;AAEP,eAAexB,UAAf"},"metadata":{},"sourceType":"module"}