{"ast":null,"code":"var _jsxFileName = \"D:\\\\Yaryna\\\\HebronSoft\\\\React\\\\practice\\\\notes-app\\\\src\\\\components\\\\Notes\\\\NotesButtons\\\\RemoveButton.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport Modal from \"../../UI/Modal\";\nimport { appStateActions } from \"../../../store/app-state-slice\";\nimport { notesActions } from \"../../../store/notes-slice\";\nimport { NotificationTypes } from \"../../../types/NotificationTypes\";\nimport classes from \"../../../styles/Module/NotesButton.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RemoveButton = () => {\n  _s();\n\n  let notificationText = \"\";\n  let notificationType = NotificationTypes.alertSecondary;\n  const [isModalShown, setIsModalShown] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const notes = useSelector(state => state.notesSlice.notes);\n  const chosenNoteId = useSelector(state => state.notesSlice.chosenNoteId);\n\n  const removeButtonHandler = () => {\n    if (chosenNoteId) {\n      setIsModalShown(true);\n    } else {\n      setIsModalShown(false);\n      notificationText = \"Please, choose a note to remove.\";\n      dispatch(appStateActions.setState({\n        showNotification: true,\n        notificationType: NotificationTypes.alertWarning,\n        notificationMessage: notificationText\n      }));\n    }\n  };\n\n  useEffect(() => {\n    dispatch(notesActions.setChosenNoteId(\"\"));\n  }, [location.pathname]);\n\n  const removeItem = async itemId => {\n    const fetchData = async () => {\n      const response = await fetch(\"http://localhost:3000/notices/\" + itemId, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong/ deleting data from backend!\");\n      }\n\n      dispatch(notesActions.removeNote(itemId));\n    };\n\n    await fetchData().catch(error => {\n      throw new Error(error.message);\n    });\n  };\n\n  const removeDirectoryHandler = async () => {\n    let errorText = \"\";\n\n    try {\n      await removeItem(chosenNoteId);\n    } catch (error) {\n      if (error instanceof Error) {\n        errorText = error.message;\n      }\n    }\n\n    setIsModalShown(false);\n\n    if (errorText) {\n      notificationText = errorText;\n      notificationType = NotificationTypes.alertDanger;\n    } else {\n      notificationText = \"The note was removed successfully\"; // const path = \"..\" + location.pathname.slice(0, location.pathname.lastIndexOf(\"/\"));\n\n      navigate(\"/\", {\n        replace: true\n      });\n    }\n\n    dispatch(appStateActions.setState({\n      showNotification: true,\n      notificationType: notificationType,\n      notificationMessage: notificationText\n    }));\n  };\n\n  function modalOnCloseHandle() {\n    setIsModalShown(false);\n  }\n\n  const removeDirectoryElements = /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.title,\n      children: \"Are you sure to remove note?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.controlsContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: removeDirectoryHandler,\n        children: \"OK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: modalOnCloseHandle,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: removeButtonHandler,\n      children: \"REMOVE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), isModalShown && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: modalOnCloseHandle,\n      children: removeDirectoryElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RemoveButton, \"8jTZjiGkMwVYDlzkip8tlqhnvaY=\", false, function () {\n  return [useDispatch, useNavigate, useLocation, useSelector, useSelector];\n});\n\n_c = RemoveButton;\nexport default RemoveButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"RemoveButton\");","map":{"version":3,"names":["Fragment","useEffect","useState","useSelector","useDispatch","useLocation","useNavigate","Modal","appStateActions","notesActions","NotificationTypes","classes","RemoveButton","notificationText","notificationType","alertSecondary","isModalShown","setIsModalShown","dispatch","navigate","location","notes","state","notesSlice","chosenNoteId","removeButtonHandler","setState","showNotification","alertWarning","notificationMessage","setChosenNoteId","pathname","removeItem","itemId","fetchData","response","fetch","method","headers","ok","Error","removeNote","catch","error","message","removeDirectoryHandler","errorText","alertDanger","replace","modalOnCloseHandle","removeDirectoryElements","title","controlsContainer"],"sources":["D:/Yaryna/HebronSoft/React/practice/notes-app/src/components/Notes/NotesButtons/RemoveButton.tsx"],"sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\n\r\nimport Modal from \"../../UI/Modal\";\r\n\r\nimport { appStateActions } from \"../../../store/app-state-slice\";\r\nimport { notesActions } from \"../../../store/notes-slice\";\r\n\r\nimport { NotificationTypes } from \"../../../types/NotificationTypes\";\r\n\r\nimport { NoteType } from \"../../../types/NotesTypes\";\r\n\r\nimport classes from \"../../../styles/Module/NotesButton.module.css\";\r\n\r\nconst RemoveButton = () => {\r\n  let notificationText = \"\";\r\n  let notificationType = NotificationTypes.alertSecondary;\r\n\r\n  const [isModalShown, setIsModalShown] = useState<boolean>(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const notes = useSelector((state: { notesSlice: { notes: NoteType[] } }) => state.notesSlice.notes);\r\n\r\n  const chosenNoteId = useSelector((state: { notesSlice: { chosenNoteId: number } }) => state.notesSlice.chosenNoteId);\r\n\r\n  const removeButtonHandler = () => {\r\n    if (chosenNoteId) {\r\n      setIsModalShown(true);\r\n    } else {\r\n      setIsModalShown(false);\r\n      notificationText = \"Please, choose a note to remove.\";\r\n      dispatch(\r\n        appStateActions.setState({\r\n          showNotification: true,\r\n          notificationType: NotificationTypes.alertWarning,\r\n          notificationMessage: notificationText,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(notesActions.setChosenNoteId(\"\"));\r\n  }, [location.pathname]);\r\n\r\n  const removeItem = async (itemId: number) => {\r\n    const fetchData = async () => {\r\n      const response = await fetch(\"http://localhost:3000/notices/\" + itemId, {\r\n        method: \"DELETE\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong/ deleting data from backend!\");\r\n      }\r\n      dispatch(notesActions.removeNote(itemId));\r\n    };\r\n\r\n    await fetchData().catch((error) => {\r\n      throw new Error(error.message);\r\n    });\r\n  };\r\n\r\n  const removeDirectoryHandler = async () => {\r\n    let errorText = \"\";\r\n    try {\r\n      await removeItem(chosenNoteId);\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        errorText = error.message;\r\n      }\r\n    }\r\n\r\n    setIsModalShown(false);\r\n\r\n    if (errorText) {\r\n      notificationText = errorText;\r\n      notificationType = NotificationTypes.alertDanger;\r\n    } else {\r\n      notificationText = \"The note was removed successfully\";\r\n      // const path = \"..\" + location.pathname.slice(0, location.pathname.lastIndexOf(\"/\"));\r\n      navigate(\"/\", { replace: true });\r\n    }\r\n\r\n    dispatch(\r\n      appStateActions.setState({\r\n        showNotification: true,\r\n        notificationType: notificationType,\r\n        notificationMessage: notificationText,\r\n      })\r\n    );\r\n  };\r\n\r\n  function modalOnCloseHandle() {\r\n    setIsModalShown(false);\r\n  }\r\n\r\n  const removeDirectoryElements = (\r\n    <Fragment>\r\n      <p className={classes.title}>Are you sure to remove note?</p>\r\n\r\n      <div className={classes.controlsContainer}>\r\n        <button onClick={removeDirectoryHandler}>OK</button>\r\n        <button onClick={modalOnCloseHandle}>Cancel</button>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={removeButtonHandler}>REMOVE</button>\r\n      {isModalShown && <Modal onClose={modalOnCloseHandle}>{removeDirectoryElements}</Modal>}\r\n    </div>\r\n  );\r\n};\r\nexport default RemoveButton;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}