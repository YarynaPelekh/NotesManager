{"ast":null,"code":"var _jsxFileName = \"D:\\\\Yaryna\\\\HebronSoft\\\\React\\\\practice\\\\notes-app\\\\src\\\\components\\\\Notes\\\\Search\\\\SearchBar.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ReactTags from \"react-tag-autocomplete\";\nimport { useNavigate } from \"react-router-dom\";\nimport { searchActions } from \"../../../store/search-slice\";\nimport classes from \"../../../styles/Module/SearchBar.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet tags = [];\n\nconst SearchBar = () => {\n  _s();\n\n  const [isAdvancedSearch, setIsAdvancedSearch] = useState(false);\n  const searchValueRef = useRef(null);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const notes = useSelector(state => state.notesSlice.notes);\n  let i = 0;\n  const tagsSuggestions = useSelector(state => state.tagsSlice.tags).map(item => {\n    return {\n      id: i++,\n      name: item\n    };\n  });\n  let searchValues = [...useSelector(state => state.searchSlice.searchValues)];\n  const searchModeAdvanced = useSelector(state => state.searchSlice.advancedSearchMode);\n  useEffect(() => {\n    setIsAdvancedSearch(searchModeAdvanced);\n  }, [searchModeAdvanced]);\n  i = 0;\n  let searchAutocompleteSuggestions = notes.map(item => {\n    return item.title.split(\" \");\n  }).flat().map(item => {\n    return {\n      id: i++,\n      name: item\n    };\n  });\n\n  if (searchModeAdvanced) {\n    searchAutocompleteSuggestions = [...searchAutocompleteSuggestions, ...notes.map(item => {\n      return item.description.split(\" \");\n    }).flat().map(item => {\n      return {\n        id: i++,\n        name: item\n      };\n    })];\n    searchAutocompleteSuggestions = [...searchAutocompleteSuggestions, ...tagsSuggestions];\n  }\n\n  const onAdditionTag = tag => {\n    tags.push(tag);\n    searchValues = tags.map(item => {\n      return item.name;\n    });\n  };\n\n  const onDeleteTag = i => {\n    tags.splice(i, 1);\n    searchValues = tags.map(item => {\n      return item.name;\n    });\n  };\n\n  const searchButtonClick = () => {\n    dispatch(searchActions.storeSearchValues(searchValues));\n    const queryParam = \"mode=\" + (isAdvancedSearch ? \"advanced\" : \"simple\") + \"%\" + searchValues;\n    navigate(\"/notes/search?\" + queryParam);\n  };\n\n  const searchModeHandle = () => {\n    dispatch(searchActions.setAdvancedSearchMode(!isAdvancedSearch));\n    setIsAdvancedSearch(!isAdvancedSearch);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(ReactTags, {\n      className: classes.reactTags,\n      placeholderText: \"Input text for search\",\n      autoresize: false,\n      minQueryLength: 1,\n      allowNew: true,\n      addOnBlur: true,\n      ref: searchValueRef,\n      tags: tags,\n      suggestions: searchAutocompleteSuggestions,\n      onDelete: onDeleteTag,\n      onAddition: onAdditionTag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"searchMode\",\n      name: \"searchMode\",\n      value: \"Advanced\",\n      checked: isAdvancedSearch,\n      onChange: searchModeHandle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"searchMode\",\n      children: \"advanced\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: searchButtonClick,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchBar, \"zkoDt/J2VPGga1jrHiFYUT06rJA=\", false, function () {\n  return [useDispatch, useNavigate, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = SearchBar;\nexport default _c2 = /*#__PURE__*/React.memo(SearchBar);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SearchBar\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useSelector","useDispatch","ReactTags","useNavigate","searchActions","classes","tags","SearchBar","isAdvancedSearch","setIsAdvancedSearch","searchValueRef","dispatch","navigate","notes","state","notesSlice","i","tagsSuggestions","tagsSlice","map","item","id","name","searchValues","searchSlice","searchModeAdvanced","advancedSearchMode","searchAutocompleteSuggestions","title","split","flat","description","onAdditionTag","tag","push","onDeleteTag","splice","searchButtonClick","storeSearchValues","queryParam","searchModeHandle","setAdvancedSearchMode","container","reactTags","memo"],"sources":["D:/Yaryna/HebronSoft/React/practice/notes-app/src/components/Notes/Search/SearchBar.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport ReactTags from \"react-tag-autocomplete\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { searchActions } from \"../../../store/search-slice\";\r\n\r\nimport { NoteType } from \"../../../types/NotesTypes\";\r\n\r\nimport classes from \"../../../styles/Module/SearchBar.module.css\";\r\n\r\nlet tags = [];\r\n\r\nconst SearchBar = () => {\r\n  const [isAdvancedSearch, setIsAdvancedSearch] = useState(false);\r\n  const searchValueRef = useRef<HTMLInputElement>(null);\r\n\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const notes = useSelector((state: { notesSlice: { notes: NoteType[] } }) => state.notesSlice.notes);\r\n  let i = 0;\r\n  const tagsSuggestions = useSelector((state: { tagsSlice: { tags: string[] } }) => state.tagsSlice.tags).map(\r\n    (item) => {\r\n      return { id: i++, name: item };\r\n    }\r\n  );\r\n  let searchValues = [\r\n    ...(useSelector(\r\n      (state: { searchSlice: { searchValues: string[] } }) => state.searchSlice.searchValues\r\n    ) as string[]),\r\n  ];\r\n  const searchModeAdvanced = useSelector(\r\n    (state: { searchSlice: { advancedSearchMode: boolean } }) => state.searchSlice.advancedSearchMode\r\n  ) as boolean;\r\n\r\n  useEffect(() => {\r\n    setIsAdvancedSearch(searchModeAdvanced);\r\n  }, [searchModeAdvanced]);\r\n\r\n  i = 0;\r\n  let searchAutocompleteSuggestions = notes\r\n    .map((item) => {\r\n      return item.title.split(\" \");\r\n    })\r\n    .flat()\r\n    .map((item) => {\r\n      return { id: i++, name: item };\r\n    });\r\n\r\n  if (searchModeAdvanced) {\r\n    searchAutocompleteSuggestions = [\r\n      ...searchAutocompleteSuggestions,\r\n      ...notes\r\n        .map((item) => {\r\n          return item.description.split(\" \");\r\n        })\r\n        .flat()\r\n        .map((item) => {\r\n          return { id: i++, name: item };\r\n        }),\r\n    ];\r\n    searchAutocompleteSuggestions = [...searchAutocompleteSuggestions, ...tagsSuggestions];\r\n  }\r\n\r\n  const onAdditionTag = (tag) => {\r\n    tags.push(tag);\r\n    searchValues = tags.map((item) => {\r\n      return item.name;\r\n    });\r\n  };\r\n\r\n  const onDeleteTag = (i) => {\r\n    tags.splice(i, 1);\r\n    searchValues = tags.map((item) => {\r\n      return item.name;\r\n    });\r\n  };\r\n\r\n  const searchButtonClick = () => {\r\n    dispatch(searchActions.storeSearchValues(searchValues));\r\n    const queryParam = \"mode=\" + (isAdvancedSearch ? \"advanced\" : \"simple\") + \"%\" + searchValues;\r\n    navigate(\"/notes/search?\" + queryParam);\r\n  };\r\n\r\n  const searchModeHandle = () => {\r\n    dispatch(searchActions.setAdvancedSearchMode(!isAdvancedSearch));\r\n    setIsAdvancedSearch(!isAdvancedSearch);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      {/* <label>Search</label> */}\r\n      <ReactTags\r\n        className={classes.reactTags}\r\n        placeholderText=\"Input text for search\"\r\n        autoresize={false}\r\n        minQueryLength={1}\r\n        allowNew={true}\r\n        addOnBlur={true}\r\n        ref={searchValueRef}\r\n        tags={tags}\r\n        suggestions={searchAutocompleteSuggestions}\r\n        onDelete={onDeleteTag}\r\n        onAddition={onAdditionTag}\r\n      />\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"searchMode\"\r\n        name=\"searchMode\"\r\n        value=\"Advanced\"\r\n        checked={isAdvancedSearch}\r\n        onChange={searchModeHandle}\r\n      />\r\n      <label htmlFor=\"searchMode\">advanced</label>\r\n      <button onClick={searchButtonClick}>Search</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SearchBar);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}