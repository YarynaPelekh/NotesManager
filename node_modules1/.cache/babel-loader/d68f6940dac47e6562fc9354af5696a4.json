{"ast":null,"code":"var _jsxFileName = \"D:\\\\Yaryna\\\\HebronSoft\\\\React\\\\practice\\\\notes-app\\\\src\\\\components\\\\Notes\\\\NotesButtons\\\\AddButton.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Modal from \"../../UI/Modal\";\nimport AddEditForm from \"./AddEditForm\";\nimport { appStateActions } from \"../../../store/app-state-slice\";\nimport { notesActions } from \"../../../store/notes-slice\";\nimport { NotificationTypes } from \"../../../types/NotificationTypes\";\nimport { tagsActions } from \"../../../store/tags-slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddButton = () => {\n  _s();\n\n  let notificationText = \"The note was added successfully\";\n  let notificationType = NotificationTypes.alertLight;\n  const [isModalShown, setIsModalShown] = useState(false);\n  const dispatch = useDispatch();\n  const chosenDirectoryId = useSelector(state => state.directoriesSlice.chosenDirectoryId);\n\n  const addButtonHandler = () => {\n    if (!chosenDirectoryId) {\n      dispatch(appStateActions.setState({\n        showNotification: true,\n        notificationType: NotificationTypes.alertWarning,\n        notificationMessage: \"Please, choose a directory!\"\n      }));\n    } else {\n      setIsModalShown(true);\n    }\n  };\n\n  const addNoteHandler = async enteredValues => {\n    const enteredTitle = enteredValues.title;\n    const enteredDescription = enteredValues.description;\n    const enteredTags = enteredValues.tags;\n\n    const fetchData = async () => {\n      const response = await fetch(\"http://localhost:3000/notices\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          description: enteredDescription,\n          directoryId: chosenDirectoryId,\n          tags: enteredTags,\n          title: enteredTitle\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong/ sending data to backend!\");\n      } else {\n        const responseData = await response.json();\n        dispatch(notesActions.addNote({\n          description: responseData.description,\n          directoryId: responseData.directoryId,\n          id: responseData.id,\n          position: responseData.position,\n          tags: responseData.tags,\n          title: responseData.title\n        }));\n        dispatch(tagsActions.updateTags(responseData.tags));\n      }\n    };\n\n    try {\n      await fetchData().catch(error => {\n        throw new Error(error.message);\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        notificationText = error.message;\n        notificationType = NotificationTypes.alertDanger;\n      }\n    }\n\n    dispatch(appStateActions.setState({\n      showNotification: true,\n      notificationType: notificationType,\n      notificationMessage: notificationText\n    }));\n    setIsModalShown(false);\n  };\n\n  const modalOnCloseHandle = () => {\n    setIsModalShown(false);\n  };\n\n  const addNoteElements = /*#__PURE__*/_jsxDEV(AddEditForm, {\n    formTitle: \"Input a new note\",\n    initialValues: {\n      title: \"\",\n      description: \"\",\n      tags: \"\"\n    },\n    saveNoteHandler: addNoteHandler,\n    modalOnCloseHandle: modalOnCloseHandle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addButtonHandler,\n      children: \"ADD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), isModalShown && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: modalOnCloseHandle,\n      children: addNoteElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddButton, \"r+L2Lev4bJVKT0CUpGnijKaiKSc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = AddButton;\nexport default AddButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddButton\");","map":{"version":3,"names":["useState","useSelector","useDispatch","Modal","AddEditForm","appStateActions","notesActions","NotificationTypes","tagsActions","AddButton","notificationText","notificationType","alertLight","isModalShown","setIsModalShown","dispatch","chosenDirectoryId","state","directoriesSlice","addButtonHandler","setState","showNotification","alertWarning","notificationMessage","addNoteHandler","enteredValues","enteredTitle","title","enteredDescription","description","enteredTags","tags","fetchData","response","fetch","method","body","JSON","stringify","directoryId","headers","ok","Error","responseData","json","addNote","id","position","updateTags","catch","error","message","alertDanger","modalOnCloseHandle","addNoteElements"],"sources":["D:/Yaryna/HebronSoft/React/practice/notes-app/src/components/Notes/NotesButtons/AddButton.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport Modal from \"../../UI/Modal\";\r\nimport AddEditForm from \"./AddEditForm\";\r\n\r\nimport { appStateActions } from \"../../../store/app-state-slice\";\r\nimport { notesActions } from \"../../../store/notes-slice\";\r\n\r\nimport { NotificationTypes } from \"../../../types/NotificationTypes\";\r\nimport { InputNoteValues } from \"../../../types/NotesTypes\";\r\nimport { tagsActions } from \"../../../store/tags-slice\";\r\n\r\nconst AddButton = () => {\r\n  let notificationText = \"The note was added successfully\";\r\n  let notificationType = NotificationTypes.alertLight;\r\n\r\n  const [isModalShown, setIsModalShown] = useState<boolean>(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const chosenDirectoryId = useSelector(\r\n    (state: { directoriesSlice: { chosenDirectoryId: string } }) => state.directoriesSlice.chosenDirectoryId\r\n  );\r\n\r\n  const addButtonHandler = () => {\r\n    if (!chosenDirectoryId) {\r\n      dispatch(\r\n        appStateActions.setState({\r\n          showNotification: true,\r\n          notificationType: NotificationTypes.alertWarning,\r\n          notificationMessage: \"Please, choose a directory!\",\r\n        })\r\n      );\r\n    } else {\r\n      setIsModalShown(true);\r\n    }\r\n  };\r\n\r\n  const addNoteHandler = async (enteredValues: InputNoteValues) => {\r\n    const enteredTitle = enteredValues.title;\r\n    const enteredDescription = enteredValues.description;\r\n    const enteredTags = enteredValues.tags;\r\n\r\n    const fetchData = async () => {\r\n      const response = await fetch(\"http://localhost:3000/notices\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          description: enteredDescription,\r\n          directoryId: chosenDirectoryId,\r\n          tags: enteredTags,\r\n          title: enteredTitle,\r\n        }),\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong/ sending data to backend!\");\r\n      } else {\r\n        const responseData = await response.json();\r\n        dispatch(\r\n          notesActions.addNote({\r\n            description: responseData.description,\r\n            directoryId: responseData.directoryId,\r\n            id: responseData.id,\r\n            position: responseData.position,\r\n            tags: responseData.tags,\r\n            title: responseData.title,\r\n          })\r\n        );\r\n        dispatch(tagsActions.updateTags(responseData.tags));\r\n      }\r\n    };\r\n\r\n    try {\r\n      await fetchData().catch((error) => {\r\n        throw new Error(error.message);\r\n      });\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        notificationText = error.message;\r\n        notificationType = NotificationTypes.alertDanger;\r\n      }\r\n    }\r\n\r\n    dispatch(\r\n      appStateActions.setState({\r\n        showNotification: true,\r\n        notificationType: notificationType,\r\n        notificationMessage: notificationText,\r\n      })\r\n    );\r\n    setIsModalShown(false);\r\n  };\r\n\r\n  const modalOnCloseHandle = () => {\r\n    setIsModalShown(false);\r\n  };\r\n\r\n  const addNoteElements = (\r\n    <AddEditForm\r\n      formTitle=\"Input a new note\"\r\n      initialValues={{ title: \"\", description: \"\", tags: \"\" }}\r\n      saveNoteHandler={addNoteHandler}\r\n      modalOnCloseHandle={modalOnCloseHandle}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={addButtonHandler}>ADD</button>\r\n      {isModalShown && <Modal onClose={modalOnCloseHandle}>{addNoteElements}</Modal>}\r\n    </div>\r\n  );\r\n};\r\nexport default AddButton;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}