{"ast":null,"code":"var _jsxFileName = \"D:\\\\Yaryna\\\\HebronSoft\\\\React\\\\practice\\\\notes-app\\\\src\\\\components\\\\Notes\\\\NotesButtons\\\\EditButton.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Modal from \"../../UI/Modal\";\nimport AddEditForm from \"./AddEditForm\";\nimport { appStateActions } from \"../../../store/app-state-slice\";\nimport { notesActions } from \"../../../store/notes-slice\";\nimport { tagsActions } from \"../../../store/tags-slice\";\nimport { NotificationTypes } from \"../../../types/NotificationTypes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditButton = () => {\n  _s();\n\n  let notificationText = \"The note was edited successfully\";\n  let notificationType = NotificationTypes.alertLight;\n  const [isModalShown, setIsModalShown] = useState(false);\n  const dispatch = useDispatch();\n  const chosenNoteId = useSelector(state => state.notesSlice.chosenNoteId);\n  const chosenNote = useSelector(state => state.notesSlice.notes).filter(item => item.id === +chosenNoteId)[0];\n\n  const modalOnCloseHandle = () => {\n    setIsModalShown(false);\n  };\n\n  const editButtonHandler = () => {\n    if (!chosenNoteId) {\n      dispatch(appStateActions.setState({\n        showNotification: true,\n        notificationType: NotificationTypes.alertWarning,\n        notificationMessage: \"Please, choose a note!\"\n      }));\n    } else {\n      setIsModalShown(true);\n    }\n  };\n\n  const editNoteHandler = async enteredValues => {\n    const enteredTitle = enteredValues.title;\n    const enteredDescription = enteredValues.description;\n    const enteredTags = enteredValues.tags;\n    const updatedNote = Object.assign({}, chosenNote, {\n      description: enteredDescription,\n      tags: enteredTags,\n      title: enteredTitle\n    });\n\n    const fetchData = async () => {\n      const response = await fetch(\"http://localhost:3000/notices/\" + String(chosenNoteId), {\n        method: \"PUT\",\n        body: JSON.stringify(updatedNote),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong/ sending data to backend!\");\n      } else {\n        const responseData = await response.json();\n        dispatch(notesActions.updateNote(responseData));\n        dispatch(tagsActions.updateTags(responseData.tags));\n      }\n    };\n\n    try {\n      await fetchData().catch(error => {\n        throw new Error(error.message);\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        notificationText = error.message;\n        notificationType = NotificationTypes.alertDanger;\n      }\n    }\n\n    dispatch(appStateActions.setState({\n      showNotification: true,\n      notificationType: notificationType,\n      notificationMessage: notificationText\n    }));\n    setIsModalShown(false);\n  };\n\n  const editNoteElements = /*#__PURE__*/_jsxDEV(AddEditForm, {\n    formTitle: \"Edit note details\",\n    initialValues: {\n      title: chosenNote && chosenNote.title,\n      description: chosenNote && chosenNote.description,\n      tags: chosenNote && chosenNote.tags\n    },\n    saveNoteHandler: editNoteHandler,\n    modalOnCloseHandle: modalOnCloseHandle\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: editButtonHandler,\n      children: \"EDIT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), isModalShown && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: modalOnCloseHandle,\n      children: editNoteElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditButton, \"QpFJOORBgNBCqyVbf+d7XtN6CBg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = EditButton;\nexport default EditButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditButton\");","map":{"version":3,"names":["useState","useSelector","useDispatch","Modal","AddEditForm","appStateActions","notesActions","tagsActions","NotificationTypes","EditButton","notificationText","notificationType","alertLight","isModalShown","setIsModalShown","dispatch","chosenNoteId","state","notesSlice","chosenNote","notes","filter","item","id","modalOnCloseHandle","editButtonHandler","setState","showNotification","alertWarning","notificationMessage","editNoteHandler","enteredValues","enteredTitle","title","enteredDescription","description","enteredTags","tags","updatedNote","Object","assign","fetchData","response","fetch","String","method","body","JSON","stringify","headers","ok","Error","responseData","json","updateNote","updateTags","catch","error","message","alertDanger","editNoteElements"],"sources":["D:/Yaryna/HebronSoft/React/practice/notes-app/src/components/Notes/NotesButtons/EditButton.tsx"],"sourcesContent":["import { Fragment, useState, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport Modal from \"../../UI/Modal\";\r\nimport AddEditForm from \"./AddEditForm\";\r\n\r\nimport { appStateActions } from \"../../../store/app-state-slice\";\r\nimport { notesActions } from \"../../../store/notes-slice\";\r\nimport { tagsActions } from \"../../../store/tags-slice\";\r\n\r\nimport { NotificationTypes } from \"../../../types/NotificationTypes\";\r\nimport { NoteType, InputNoteValues } from \"../../../types/NotesTypes\";\r\n\r\nconst EditButton = () => {\r\n  let notificationText = \"The note was edited successfully\";\r\n  let notificationType = NotificationTypes.alertLight;\r\n\r\n  const [isModalShown, setIsModalShown] = useState<boolean>(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const chosenNoteId = useSelector((state: { notesSlice: { chosenNoteId: number } }) => state.notesSlice.chosenNoteId);\r\n  const chosenNote = useSelector((state: { notesSlice: { notes: NoteType[] } }) => state.notesSlice.notes).filter(\r\n    (item: NoteType) => item.id === +chosenNoteId\r\n  )[0];\r\n\r\n  const modalOnCloseHandle = () => {\r\n    setIsModalShown(false);\r\n  };\r\n\r\n  const editButtonHandler = () => {\r\n    if (!chosenNoteId) {\r\n      dispatch(\r\n        appStateActions.setState({\r\n          showNotification: true,\r\n          notificationType: NotificationTypes.alertWarning,\r\n          notificationMessage: \"Please, choose a note!\",\r\n        })\r\n      );\r\n    } else {\r\n      setIsModalShown(true);\r\n    }\r\n  };\r\n\r\n  const editNoteHandler = async (enteredValues: InputNoteValues) => {\r\n    const enteredTitle = enteredValues.title;\r\n    const enteredDescription = enteredValues.description;\r\n    const enteredTags = enteredValues.tags;\r\n\r\n    const updatedNote = Object.assign({}, chosenNote, {\r\n      description: enteredDescription,\r\n      tags: enteredTags,\r\n      title: enteredTitle,\r\n    });\r\n\r\n    const fetchData = async () => {\r\n      const response = await fetch(\"http://localhost:3000/notices/\" + String(chosenNoteId), {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(updatedNote),\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Something went wrong/ sending data to backend!\");\r\n      } else {\r\n        const responseData = await response.json();\r\n        dispatch(notesActions.updateNote(responseData));\r\n\r\n        dispatch(tagsActions.updateTags(responseData.tags));\r\n      }\r\n    };\r\n\r\n    try {\r\n      await fetchData().catch((error) => {\r\n        throw new Error(error.message);\r\n      });\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        notificationText = error.message;\r\n        notificationType = NotificationTypes.alertDanger;\r\n      }\r\n    }\r\n\r\n    dispatch(\r\n      appStateActions.setState({\r\n        showNotification: true,\r\n        notificationType: notificationType,\r\n        notificationMessage: notificationText,\r\n      })\r\n    );\r\n    setIsModalShown(false);\r\n  };\r\n\r\n  const editNoteElements = (\r\n    <AddEditForm\r\n      formTitle=\"Edit note details\"\r\n      initialValues={{\r\n        title: chosenNote && chosenNote.title,\r\n        description: chosenNote && chosenNote.description,\r\n        tags: chosenNote && chosenNote.tags,\r\n      }}\r\n      saveNoteHandler={editNoteHandler}\r\n      modalOnCloseHandle={modalOnCloseHandle}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={editButtonHandler}>EDIT</button>\r\n      {isModalShown && <Modal onClose={modalOnCloseHandle}>{editNoteElements}</Modal>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditButton;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}